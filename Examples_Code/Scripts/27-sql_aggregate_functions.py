# -*- coding: utf-8 -*-
"""26-SQL Aggregate Functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yb846XuSNeVQ2ZPEaW9nQpLUY1Nv7P8J
"""

simpleData = [("James", "Sales", 3000),
    ("Michael", "Sales", 4600),
    ("Robert", "Sales", 4100),
    ("Maria", "Finance", 3000),
    ("James", "Sales", 3000),
    ("Scott", "Finance", 3300),
    ("Jen", "Finance", 3900),
    ("Jeff", "Marketing", 3000),
    ("Kumar", "Marketing", 2000),
    ("Saif", "Sales", 4100)
  ]
schema = ["employee_name", "department", "salary"]
df = spark.createDataFrame(data=simpleData, schema = schema)
df.printSchema()
df.show(truncate=False)

from pyspark.sql.functions import approx_count_distinct
print("approx_count_distinct: " + \
      str(df.select(approx_count_distinct("salary")).collect()[0][0]))

from pyspark.sql.functions import avg
#avg
print("avg: " + str(df.select(avg("salary")).collect()[0][0]))

from pyspark.sql.functions import collect_list
#collect_list
df.select(collect_list("salary")).show(truncate=False)

from pyspark.sql.functions import collect_set
#collect_set
df.select(collect_set("salary")).show(truncate=False)

from pyspark.sql.functions import countDistinct
#countDistinct
df2 = df.select(countDistinct("department", "salary"))
df2.show(truncate=False)
print("Distinct Count of Department & Salary: "+str(df2.collect()[0][0]))

from pyspark.sql.functions import count
print("count: "+str(df.select(count("salary")).collect()[0]))

from pyspark.sql.functions import first
#first
df.select(first("salary")).show(truncate=False)

from pyspark.sql.functions import last
#last
df.select(last("salary")).show(truncate=False)

from pyspark.sql.functions import kurtosis
df.select(kurtosis("salary")).show(truncate=False)

from pyspark.sql.functions import max
df.select(max("salary")).show(truncate=False)

from pyspark.sql.functions import min
df.select(min("salary")).show(truncate=False)

from pyspark.sql.functions import mean
df.select(mean("salary")).show(truncate=False)

from pyspark.sql.functions import skewness
df.select(skewness("salary")).show(truncate=False)

from pyspark.sql.functions import stddev,stddev_samp,stddev_pop
df.select(stddev("salary"), stddev_samp("salary"), \
    stddev_pop("salary")).show(truncate=False)

from pyspark.sql.functions import sum
df.select(sum("salary")).show(truncate=False)

from pyspark.sql.functions import sumDistinct
df.select(sumDistinct("salary")).show(truncate=False)

from pyspark.sql.functions import variance,var_samp,var_pop
df.select(variance("salary"),var_samp("salary"),var_pop("salary")) \
  .show(truncate=False)

